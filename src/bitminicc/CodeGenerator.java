package bitminicc;

import java.util.Stack;

public class CodeGenerator {
	private Stack<Integer> regs = new Stack<Integer>();
	
	public CodeGenerator(){
		regs.push(25);
		regs.push(24);
		regs.push(15);
		regs.push(14);
		regs.push(13);
		regs.push(12);
		regs.push(11);
		regs.push(10);
		regs.push(9);
		regs.push(8);
	}

	public void run(){
		System.out.println("Code generating...");
		
		String code = "";
		
		//regAlloc(Parser.root, null);
		
		code += genHeader();
		
		code += genDataSection();
		
		code += "\t.text\n";
		
		code += genInit();
		
		code += codeGen(Parser.root);
		
		System.out.println(code);
	}
	
	public void regAlloc(TreeNode root, SymbolTable st){
		
		if(root.getType() == TreeNodeType.TNT_FUNC_DEF){
			st = root.getSymbolTable();
			for(SymbolEntry se : st.getSymbolList()){
				se.reg = regs.pop();
			}
		}else if(root.getType() == TreeNodeType.TNT_CNST_FLOAT || root.getType() == TreeNodeType.TNT_CNST_INT){
			root.setReg(regs.pop());
		}else if(root.getType() == TreeNodeType.TNT_ID){
			String name = (String) Scanner.getTknValueList().get(root.getTknIndex());
			SymbolEntry se = st.findByName(name);
			if(se != null){
				root.setReg(se.reg);
			}
		}else if(root.getType() == TreeNodeType.TNT_OP_PLUS){
			root.setReg(root.getChildByIndex(0).getReg());
		}else{
			root.setReg(root.getChildByIndex(0).getReg());
		}
		
		
		for(TreeNode n: root.getChildren()){
			regAlloc(n, st);
		}
		
		if(root.getType() == TreeNodeType.TNT_FUNC_DEF){
			
		}
	}
	
	public String genInit(){
		String code = "";
		
		code += "#code for initialization\n";
		code += "init:\n";
		code += "\taddiu $fp, $zero, 1024\n";
		code += "\taddiu $sp, $zero, 1024\n";
		code += "\taddiu $sp, $sp, -64\n";
		code += "\tjal main\n";
		code += "\n";
		code += "\tli $v0, 10\n";
		code += "\tsyscall\n";		
		
		return code;
	}
	
	public String genDataSection(){
		String code = "";
		
		code += "\t.data\n";
		code += "\n\n";
		
		return code;		
		
	}
	
	public String genHeader(){
		String code = "";
		
		code += "# This file is generated by BIT-MiniCC\n";
		code += "# \n";
		code += "# \n";
		
		return code;
	}
	public String codeGen(TreeNode root){
		String code = "";
		
		
		if(root.getType() == TreeNodeType.TNT_FUNC_DEF){
			TreeNode id = root.getChildByIndex(1);
			String name = (String) Scanner.getTknValueList().get(id.getTknIndex());
			code += "#code for function " + name + "\n";
			code += name + ":\n";
			
			//gen the code for allocating a stack frame
			code += "\taddiu $sp, $sp, -64\n";
			//code += "\taddiu $fp, $fp, -64\n";
			code += "\tsw $fp,20($sp)\n";
			code += "\tmove $fp,$sp\n";
		} // This code below were giving a lot of out of bound errors
		//else if(root.getType() == TreeNodeType.TNT_EXPR){
			//if(root.getType() == TreeNodeType.TNT_ID) {
				//if(root.getType() == TreeNodeType.TNT_STMT_CALL) {
					//TreeNode id = root.getChildByIndex(0);
					//String name = (String) Scanner.getTknValueList().get(id.getTknIndex());
					
					//code += "\n";
					//code += "\t---------------\n";
					//code += "\t----- " + name + "\n";
					//code += "\t--------------------\n";
					//code += "\n";
				//}
			//}
			
		//}
		else if(root.getType() == TreeNodeType.TNT_STMT_RTN){
			code += "\n";

			code += "\taddiu $sp, $sp, 64\n";
			code += "\taddiu $fp, $fp, 64\n";
			code += "\tjr $ra\n";
			code += "\n\n";
			code += "\tmove $sp,$fp\n";
			code += "\tlw $fp,20($sp)\n";
			code += "\taddiu $sp,$sp,24\n";
			code += "\tj $31\n";
			code += "\tnop\n";
			
			code += "\n\n\n";
		}else if(root.getType() == TreeNodeType.TNT_FUNC_CALL){
			TreeNode id = root.getChildByIndex(0);
			String name = (String) Scanner.getTknValueList().get(id.getTknIndex());
			
			code += "\n";
			code += "\tli $2,"+ name +"  #0x"+ name +"\n";
			code += "\tsw $2,0($fp)\n";
			code += "\n";
			
			//code += "\n";
			//code += "\tsw $ra, 0($fp)\n";
			//code += "\tjal " + name + "\n";
			//code += "\tlw $ra, 0($fp)\n";
			//code += "\n";
			
		}
		
		for(TreeNode n: root.getChildren()){
			code += codeGen(n);
		}
		
		if(root.getType() == TreeNodeType.TNT_FUNC_DEF){
			TreeNode id = root.getChildByIndex(1);
			String name = (String) Scanner.getTknValueList().get(id.getTknIndex());
			
			if(name.toLowerCase().equals("main")){
				
			}

			
		}
		return code;
	}
}
